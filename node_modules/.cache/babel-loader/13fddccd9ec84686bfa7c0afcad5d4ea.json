{"ast":null,"code":"import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock, KeepAlive as _KeepAlive, Fragment as _Fragment, createElementBlock as _createElementBlock } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createTextVNode(\"Stored Lists\");\n\nconst _hoisted_2 = /*#__PURE__*/_createTextVNode(\" Add to List\");\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_base_button = _resolveComponent(\"base-button\");\n\n  const _component_base_card = _resolveComponent(\"base-card\");\n\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_base_card, null, {\n    default: _withCtx(() => [_createVNode(_component_base_button, {\n      onClick: _cache[0] || (_cache[0] = $event => $options.setSelectedTab('stored-lists')),\n      mode: $options.storedThingButtonMode\n    }, {\n      default: _withCtx(() => [_hoisted_1]),\n      _: 1\n      /* STABLE */\n\n    }, 8\n    /* PROPS */\n    , [\"mode\"]), _createVNode(_component_base_button, {\n      onClick: _cache[1] || (_cache[1] = $event => $options.setSelectedTab('add-thing')),\n      mode: $options.addThingButtonMode\n    }, {\n      default: _withCtx(() => [_hoisted_2]),\n      _: 1\n      /* STABLE */\n\n    }, 8\n    /* PROPS */\n    , [\"mode\"])]),\n    _: 1\n    /* STABLE */\n\n  }), (_openBlock(), _createBlock(_KeepAlive, null, [(_openBlock(), _createBlock(_resolveDynamicComponent($data.selectedTab)))], 1024\n  /* DYNAMIC_SLOTS */\n  ))], 64\n  /* STABLE_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;iDAEuF;;iDACN;;;;;;;6DAF/EA,aAGYC,oBAHZ,EAGY,IAHZ,EAGY;sBAFV,MAA6G,CAA7GD,aAA6GE,sBAA7G,EAA6G;AAA/FC,aAAK,sCAAEC,wBAAc,cAAd,CAAF,CAA0F;AAAvDC,UAAI,EAAED;AAAiD,KAA7G;wBAAmF,MAAY;;;;KAA/F;;AAAA,eAA6G,EAC7GJ,aAAuGE,sBAAvG,EAAuG;AAAzFC,aAAK,sCAAEC,wBAAc,WAAd,CAAF,CAAoF;AAApDC,UAAI,EAAED;AAA8C,KAAvG;wBAA6E,MAAY;;;;KAAzF;;AAAA,eAD6G,EAEnG;;;;AAAA,GAHZ,kBAIAE,aAEaC,UAFb,EAEa,IAFb,EAEa,gBADXD,aAAyCE,yBAAzBC,iBAAyB,CAAzC,CACW,EAFb;;AAAA","names":["_createVNode","_component_base_card","_component_base_button","onClick","$options","mode","_createBlock","_KeepAlive","_resolveDynamicComponent","$data"],"sourceRoot":"","sources":["/Users/mhlengi.nkosi/sup-grads22-vue/src/components/TheThing.vue"],"sourcesContent":["<template>\n  <base-card>\n    <base-button @click=\"setSelectedTab('stored-lists')\" :mode=\"storedThingButtonMode\">Stored Lists</base-button>\n    <base-button @click=\"setSelectedTab('add-thing')\" :mode=\"addThingButtonMode\"> Add to List</base-button>\n  </base-card>\n  <keep-alive>\n    <component :is=\"selectedTab\"></component>\n  </keep-alive>\n</template>\n\n<script>\nimport StoredLists from \"./StoredLists.vue\";\nimport AddThing from \"./Layout/AddThings.vue\";\n\nexport default {\n  components: {\n    StoredLists,\n    AddThing,\n  },\n  data() {\n    return {\n      selectedTab: \"stored-lists\",\n      storedLists: [\n        {\n          id: \"official-guide\",\n          name: \"Jack\",\n          keywords: \"braai\",\n        },\n        {\n          id: \"grocery-guide\",\n          name: \"Grocery\",\n          keywords: \"Food\",\n        },\n      ],\n    };\n  },\n  provide(){\n      return{\n          thingList: this.storedLists,\n          addThing: this.addThing,\n          deleteThing: this.removeThing\n      };\n  },\n  computed: {\n      storedThingButtonMode(){\n          return this.selectedTab === 'stored-lists' ? null : 'flat';\n      },\n      addThingButtonMode(){\n          return this.selectedTab === 'add-thing' ? null : 'flat';\n      },\n  },\n  methods: {\n    setSelectedTab(tab) {\n      this.selectedTab = tab;\n    },\n    addThing(name, keywords){\n        const newThing = {\n            id: new Date().toISOString(),\n            name: name,\n            keywords: keywords\n        };\n        this.storedLists.unshift(newThing);\n        this.selectedTab = 'stored-lists';\n    },\n    removeThing(ThingId){\n        const thingIndex = this.storedLists.findIndex(thing => thing.id === ThingId);\n        this.storedLists.splice(thingIndex, 1);\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}